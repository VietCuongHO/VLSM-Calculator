# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'vlsmapp.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import ipaddress
import math
from PyQt5 import QtCore, QtGui, QtWidgets
import logo


class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(634, 872)
        self.label = QtWidgets.QLabel(Form)
        self.label.setGeometry(QtCore.QRect(20, 110, 291, 51))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(Form)
        self.label_2.setGeometry(QtCore.QRect(30, 180, 71, 16))
        self.label_2.setObjectName("label_2")
        self.lineEdit = QtWidgets.QLineEdit(Form)
        self.lineEdit.setGeometry(QtCore.QRect(30, 200, 171, 22))
        self.lineEdit.setObjectName("lineEdit")
        self.label_3 = QtWidgets.QLabel(Form)
        self.label_3.setGeometry(QtCore.QRect(30, 240, 91, 16))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(Form)
        self.label_4.setGeometry(QtCore.QRect(30, 300, 111, 16))
        self.label_4.setObjectName("label_4")
        self.listWidget = QtWidgets.QListWidget(Form)
        self.listWidget.setGeometry(QtCore.QRect(30, 320, 571, 541))
        self.listWidget.setStyleSheet("")
        self.listWidget.setObjectName("listWidget")
        self.pushButton = QtWidgets.QPushButton(Form)
        self.pushButton.setGeometry(QtCore.QRect(510, 190, 93, 28))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.subnet)
        self.pushButton_2 = QtWidgets.QPushButton(Form)
        self.pushButton_2.setGeometry(QtCore.QRect(510, 220, 93, 28))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.delete)
        self.lineEdit_2 = QtWidgets.QLineEdit(Form)
        self.lineEdit_2.setGeometry(QtCore.QRect(30, 260, 291, 21))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.label_5 = QtWidgets.QLabel(Form)
        self.label_5.setGeometry(QtCore.QRect(440, 0, 191, 171))
        self.label_5.setObjectName("label_5")

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.label.setText(_translate("Form", "<html><head/><body><p align=\"center\"><span style=\" font-size:18pt; font-weight:600;\">VLSM CALCULATOR</span></p></body></html>"))
        self.label_2.setText(_translate("Form", "IP ADDRESS"))
        self.label_3.setText(_translate("Form", "LIST OF HOSTS"))
        self.label_4.setText(_translate("Form", "DETAIL OF HOSTS"))
        self.pushButton.setText(_translate("Form", "OK"))
        self.pushButton_2.setText(_translate("Form", "CLEAR"))
        self.label_5.setText(_translate("Form", "<html><head/><body><p><img src=\":/newPrefix/Screenshot 2022-04-18 071539.jpg\"/></p></body></html>"))

    def ktrclass(self, ip):
        lst = ip[0].split('.')
        if int(lst[0]) >= 1 and int(lst[0]) <= 127:
            return 'Class A'
        elif int(lst[0]) >= 128 and int(lst[0]) <= 191:
            return 'Class B'
        elif int(lst[0]) >= 192 and int(lst[0]) <= 223:
            return 'Class C'

    def buocnhay(self, function, value1, value2):
        lst = value1.split('.')
        if function == 'Class A':
            while (int(lst[3]) + value2) > 255:
                lst[3] = str(0)
                lst[2] = str(int(lst[2]) + 1)
                value2 = value2 - (256 - int(lst[3]))
                if int(lst[2]) > 255:
                    lst[2] = str(0)
                    lst[1] = str(int(lst[1]) + 1)
            if value2 > 0:
                lst[3] = str(int(lst[3]) + value2)
                value1new = str('.'.join(lst))
                return value1new
            else:
                value1new = str('.'.join(lst))
                return value1new
        elif function == 'Class B':
            while (int(lst[3]) + value2) > 255:
                lst[3] = str(0)
                lst[2] = str(int(lst[2]) + 1)
                value2 = value2 - (256 - int(lst[3]))
            if value2 > 0:
                lst[3] = str(int(lst[3]) + value2)
                value1new = str('.'.join(lst))
                return value1new
            else:
                value1new = str('.'.join(lst))
                return value1new
        elif function == 'Class C':
            lst[3] = str(int(lst[3]) + value2)  # cộng vào octet 2
            value1new = str('.'.join(lst))
            return value1new

    def hienthism(self, value1, value2):
        lst = []
        lst.append(value1)
        lst.append(str(value2))
        lstnew = '/'.join(lst)
        ip = ipaddress.IPv4Network(lstnew)
        return ip.netmask
        #print('Subnet mask:', ip.netmask)

    def subnet(self):
        a = self.lineEdit.text()
        b = ipaddress.IPv4Network(a)
        a1 = self.lineEdit_2.text()
        c = list(map(int, a1.split()))
        c.sort(reverse=True)
        self.listWidget.addItem(str('Thông tin của mạng {} hosts:'.format(c[0])))
        d0 = []
        d0str = []
        l0 = []
        m0 = math.ceil(math.log((c[0] + 2), 2))  # số bit còn lại phần host
        np0 = 32 - m0  # new prefix
        jump0 = 2 ** m0
        for j in b.subnets(new_prefix=np0):
            d0str.append(str(j.network_address))
        for k in b.subnets(new_prefix=np0):
            d0.append(k)
        next0str = self.buocnhay(self.ktrclass(d0str),d0str[0],jump0)
        for i in d0[0].hosts():
            l0.append(str(i))
        self.listWidget.addItem(str('Network ID: {}'.format(d0[0])))
        self.listWidget.addItem(str('Subnet mask: {}'.format(d0[0].netmask)))
        self.listWidget.addItem(str('Host range: {}/{} --> {}/{}'.format(l0[0], np0, l0[-1], np0)))
        self.listWidget.addItem(str('Broadcast ID: {}/{}'.format((ipaddress.IPv4Address(next0str) - 1), np0)))
        self.listWidget.addItem(str('Prefix length: {}'.format(np0)))
        self.listWidget.addItem(str('-------------------------------------------'))
        jump = 0
        nextstr = next0str
        for u in range(1, len(c)):
            self.listWidget.addItem(str('Thông tin của mạng {} host:'.format(c[u])))
            dstr = []
            d = []
            l = []
            m = math.ceil(math.log((c[u] + 2), 2))  # số bit còn lại phần host
            np = 32 - m  # new prefix
            for jj in b.subnets(new_prefix=np):
                dstr.append(str(jj.network_address))
            for kk in b.subnets(new_prefix=np):
                d.append(kk)
            jump = 2 ** m
            if nextstr not in dstr:
                print('Host range đã đầy')
                print('\n')
            else:
                vitri = dstr.index(str(nextstr))
                for ii in d[vitri].hosts():
                    l.append(ii)
                self.listWidget.addItem(str('Network ID: {}/{} '.format(nextstr, np)))
                self.listWidget.addItem(str('Subnet mask: {}'.format(self.hienthism(nextstr,np))))
                self.listWidget.addItem(str('Host range: {}/{}-->{}/{}'.format(l[0], np, l[-1], np)))
                self.listWidget.addItem(str('Broadcast ID: {}/{}'.format((ipaddress.IPv4Address(nextstr) + jump - 1), np)))
                self.listWidget.addItem(str('Prefix length: {}'.format(np)))
                nextstr = self.buocnhay(self.ktrclass(d0str), nextstr, jump)
                self.listWidget.addItem(str('--------------------------------------------'))


    def delete(self):
        self.lineEdit.setText('')
        self.lineEdit_2.setText('')
        self.listWidget.clear()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())
